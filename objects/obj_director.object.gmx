<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//generation script
difficulty = 0 
//0 = normal zombies, easy obstacles
//1 = armoreod zombies, buildings start to appear, doors
//2 = muscular zombies, harder obstacles - cars and signs
//3 = spitter zombies, zombies become faster, easy obstacles replaced with insta-kill
//4 = lighthouse sequence (???)
highscore = 0;
newDifficulty = false
storeAvailable = true

roomOffsetY1 = 724 //for zombies
roomOffsetY2 = 780 //for traps
roomOffsetY3 = 596 //for shops
roomOffsetY4 = 404 //for roofshops
roomOffsetY5 = 544 //for two-story buildings

roomOffsetX1 = 105 //for spitter zombie
roomOffsetX3 = 100 //for shops in buildings

pityStore = 0;

alarm_set(0, 90) //alarm for generation
alarm_set(1, 1000) //alarm for increasing difficulty
alarm_set(3, 30) //alarm for generating background
alarm_set(4, 30) //alarm for generating background

//Check if Input Overlord is in the game.
if(!instance_exists(Input)) instance_create(x, y, Input);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Randomly spawns back-background buildings.
shuffleList2 = ds_list_create()
ds_list_add(shuffleList2, spr_tower1, spr_tower2, spr_tower3)
spriteRand = ds_list_find_value(shuffleList2, irandom_range(0,2))
scale = instance_create(room_width, 546, obj_skyscraper)
scale.sprite_index = spriteRand
ds_list_destroy(shuffleList2)
alarm[4] = irandom_range(50, 100);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Randomly spawns semi-background buildings.
shuffleList = ds_list_create()
ds_list_add(shuffleList, spr_house1, spr_house2, spr_house3)
spriteRand = ds_list_find_value(shuffleList, irandom_range(0,2))
scale = instance_create(room_width, 560, obj_scale)
scale.sprite_index = spriteRand
ds_list_destroy(shuffleList)
alarm[3] = irandom_range(60, 90);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Store can be spawned again.
storeAvailable = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Increase difficulty level by 1.
difficulty++
obj_sky.image_index = difficulty
newDifficulty = true
if difficulty == 1{
    alarm_set(1,1700)
    obj_sky.image_index = 1
}else if difficulty == 2{
    alarm_set(1,100)
    alarm_set(1,3000)
}//else if difficulty == 3{
//    alarm_set(1,3000)
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn items based on difficulty.

if(difficulty == 0) //70% Normal, 30% Trip Trap (0% Pity)
{ 
    if(irandom_range(1, 10) &gt; 7) 
        instance_create(room_width, roomOffsetY1, obj_zombie);  
    else 
        instance_create(room_width, roomOffsetY2, obj_easytrap);
     
    alarm[0] = irandom_range(80, 140);
}

if(difficulty == 1) //50% Normal, 20% Charger, 20% Trip Trap, 10% Store
{
    if(newDifficulty)
    {
        newDifficulty = false;
        instance_create(room_width, roomOffsetY3, obj_gunstore);
    }
    else
    {
        var tempRand = irandom_range(1,10);
        
        if(pityStore &gt; 9) //Guaranteed Pity Spawn
        {
            instance_create(room_width, roomOffsetY3, obj_gunstore);
            show_debug_message("Pity Store spawned. You have bad luck! :(");
            pityStore = 0;
        }
        else if(tempRand &gt; 5) //Regular Zombo spawn.
        {
            instance_create(room_width, roomOffsetY1, obj_zombie);
            pityStore++;
        }
        else if(tempRand &gt; 3)
        {
            instance_create(room_width, roomOffsetY1, obj_armorzombie);
            pityStore++;
        }
        else if(tempRand &gt; 1)
        {
            instance_create(room_width, roomOffsetY2, obj_easytrap);
            pityStore++;
        }
        else
        {
            instance_create(room_width, roomOffsetY3, obj_gunstore);
            pityStore = 0;
        }
    }    
    alarm[0] = irandom_range(60, 90); 
}

if(difficulty == 2) //30% Normal, 30% Charger, 20% Tank, 10% Trip Trap, 10% Store/Normal
{ 
    if(newDifficulty)
    {
        newDifficulty = false;
        instance_create(room_width, roomOffsetY3, obj_bookstore);
    }
    else
    {
        var tempRand = irandom_range(1,10);
        
        if(pityStore &gt; 9) //Guaranteed Pity Spawn
        {
            instance_create(room_width, roomOffsetY5, obj_building);
            show_debug_message("Pity Store spawned. You have bad luck! :(");
            pityStore = 0;
        }
        else if(tempRand &gt; 7) 
        {
            instance_create(room_width, roomOffsetY1, obj_zombie);
            pityStore++;
        }
        else if (tempRand &gt; 4) 
        {
            instance_create(room_width, roomOffsetY1, obj_armorzombie);
            pityStore++;
        }
        else if (tempRand &gt; 2) 
        {
            instance_create(room_width, roomOffsetY1, obj_tankzombie);
            pityStore++;
        }
        else if (tempRand &gt; 1)
        {  
            instance_create(room_width, roomOffsetY2, obj_easytrap);
            pityStore++;        
        }
        else
        {
            if(storeAvailable)
            {
                instance_create(room_width, roomOffsetY5, obj_building);
                storeAvailable = false;
                pityStore = 0;
                alarm[2] = 150;    
            } 
            else 
            {
                instance_create(room_width, roomOffsetY1, obj_zombie); //apology zombie  
                pityStore++;
            }
        }
    }
    alarm[0] = irandom_range(40, 60);
}

if difficulty == 3 { //30% Charger, 20% Tank, 20% Spitter, 20% Trip Trap, 10% Store/Normal
    if(newDifficulty)
    {
        newDifficulty = false;
        instance_create(room_width, roomOffsetY3, obj_pawnstore);
    }
    else
    {
        var tempRand = irandom_range(1,10);
        if(tempRand &gt; 7)
        {
            instance_create(room_width, roomOffsetY1, obj_armorzombie);
            //pityStore++;
        }
        else if(tempRand &gt; 5)
        {
            instance_create(room_width, roomOffsetY1, obj_tankzombie);
            //pityStore++;
        }
        else if(tempRand &gt; 3)
        {
            instance_create(room_width + roomOffsetX1, roomOffsetY1, obj_spitterzombie);
            //pityStore++;
        }
        else if(tempRand &gt; 1)
        {     
            instance_create(room_width, roomOffsetY2, obj_easytrap);
            //pityStore++;       
        }
        else
        {
            if(storeAvailable)
            {
                instance_create(room_width, roomOffsetY5, obj_building);
                storeAvailable = false;
                //pityStore = 0;
                alarm[2] = 150;    
            } 
            else 
            {
                instance_create(room_width, roomOffsetY1, obj_zombie); //apology zombie  
                //pityStore++;
            }
        }
    }
    alarm[0] = irandom_range(35, 50);
}

if difficulty == 4 { 
    //victory!!! TODO
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>highscore += 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>display_set_gui_size(window_get_width(), window_get_height());

draw_set_font(font_score);
draw_text(32, 32, "Distance: " + string(highscore) + "m");

if(instance_exists(obj_char))
{
 draw_set_font(font_ammo);
 
 if(obj_char.pistolGotten)
 {
  draw_sprite_ext(spr_pistol, 0, 32, 96, 2, 2, 0, c_white, 1);
  draw_sprite_ext(spr_pistol_outline, 0, 32, 96, 2, 2, 0, c_white, 1);
  draw_text(128, 96, obj_char.pistol);
 }
 else if(obj_char.pistolUnlocked)
 {
  draw_sprite_ext(spr_pistol_outline, 0, 32, 96, 2, 2, 0, c_white, 1);
  draw_text(128, 96, "PICKUP");
 }
 
 if(obj_char.smgGotten)
 {
  draw_sprite_ext(spr_smg, 0, 32, 130, 2, 2, 0, c_white, 1);
  draw_sprite_ext(spr_smg_outline, 0, 32, 130, 2, 2, 0, c_white, 1);
  draw_text(128, 130, obj_char.smg);
 }
 else if(obj_char.smgUnlocked)
 {
  draw_sprite_ext(spr_smg_outline, 0, 32, 130, 2, 2, 0, c_white, 1);
  draw_text(128, 130, "PICKUP");
 }
 
 if(obj_char.rifleGotten)
 {
  draw_sprite_ext(spr_rifle, 0, 32, 172, 2, 2, 0, c_white, 1);
  draw_sprite_ext(spr_rifle_outline, 0, 32, 172, 2, 2, 0, c_white, 1);
  draw_text(128, 184, obj_char.rifle);
 }
 else if(obj_char.rifleUnlocked)
 {
  draw_sprite_ext(spr_rifle_outline, 0, 32, 172, 2, 2, 0, c_white, 1);
  draw_text(128, 184, "PICKUP");
 }
 
 //Pointer priority.
 if(obj_char.rifleGotten &amp;&amp; obj_char.rifle &gt; 0) draw_sprite(spr_pointer, 0, 8, 172+17);
 else if (obj_char.smgGotten &amp;&amp; obj_char.smg &gt; 0) draw_sprite(spr_pointer, 0, 8, 130+19);
 else if (obj_char.pistolGotten &amp;&amp; obj_char.pistol &gt; 0) draw_sprite(spr_pointer, 0, 8, 96+16);
} 
//draw_sprite(spr_instructions, 0, 32, 448);

/*
if(obj_char.rifleGotten &amp;&amp; obj_char.rifle &gt; 0) 
{
 draw_sprite_ext(spr_ammo_rifle, 0, 32, 192, 2, 2, 0, c_white, 1);
 draw_text(82, 196, string(obj_char.rifle));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
